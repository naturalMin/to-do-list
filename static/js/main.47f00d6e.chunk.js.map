{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/SelectToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","SAVETODOS_KEY","getTodos","localStorage","getItem","parsedTodos","JSON","parse","toDoState","length","toDoSelector","selector","get","toDos","category","filter","toDo","Form","styled","form","Input","input","Button","button","props","theme","accentColor","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","newToDos","text","id","Date","now","savedToDos","stringify","setItem","required","placeholder","List","li","Text","span","ButtonGroup","div","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","stringfyTodos","type","DOING","DONE","parentElement","Number","Select","select","Option","option","SelectToDo","useRecoilState","setCategory","value","onInput","Container","H1","h1","Ul","ul","Add","textColor","ToDoList","useState","addBtn","SetAddBtn","map","current","GlobalStyle","createGlobalStyle","bgColor","App","Helmet","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47f00d6e.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport enum Categories {\r\n  \"TO_DO\" = \"TO_DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n} //enum default: number but changed string.\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: Categories;\r\n}\r\n\r\nexport const categoryState = atom({\r\n  key: \"category\",\r\n  default: Categories.TO_DO,\r\n})\r\n\r\n//localstorage set up\r\n\r\nexport const SAVETODOS_KEY = \"todos\"; //ls key set up\r\nconst getTodos = localStorage.getItem(SAVETODOS_KEY);\r\nconst parsedTodos = JSON.parse(getTodos as any);\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: parsedTodos?.length > 0 ? parsedTodos : [],\r\n});\r\n\r\nexport const toDoSelector = selector({ \r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState); //atom을 selector내부로 호출.\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  }\r\n})\r\n//selector는 state를 보기좋게 변형, state logic이 변화하지않음.","import { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { categoryState, toDoState, SAVETODOS_KEY } from \"../atoms\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Form = styled.form`\r\n  margin: 15px 0px;\r\n  padding: 0 20px;\r\n  height: 32px;\r\n  display: flex;\r\n  justify-content : space-between ;\r\n`;\r\nconst Input = styled.input`\r\n  width: 90%;\r\n  height: 100%;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  padding: 0 20px;\r\n  margin-right: 5px;      \r\n`;\r\nconst Button = styled.button`\r\n  cursor: pointer;\r\n  width: 32px;\r\n  height: 100%;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  border-radius: 5px;\r\n  border: 0;\r\n  background-color: rgba(255,255,255,0.5);\r\n  &:hover {\r\n    background-color: ${props => props.theme.accentColor};\r\n  }  \r\n`;\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const setToDos = useSetRecoilState(toDoState);  //toDo state set up\r\n  const category = useRecoilValue(categoryState);  \r\n  const { register, handleSubmit, setValue} = useForm();\r\n  const handleValid = ({toDo} : IForm) => {     \r\n    setToDos((oldToDos) => {\r\n      const newToDos = [{text: toDo, id: Date.now(), category}, ...oldToDos ];\r\n      const savedToDos = JSON.stringify(newToDos);\r\n      localStorage.setItem(SAVETODOS_KEY, savedToDos);\r\n      return newToDos; //localstorage에 입력값 추가 \r\n    });\r\n    setValue(\"toDo\", \"\");   \r\n  };\r\n  \r\n  return (    \r\n      <Form onSubmit = {handleSubmit(handleValid)}>\r\n        <Input \r\n        {...register(\"toDo\", { required: \"Please Write a To Do.\"})}\r\n        placeholder = \"New To do...\"         \r\n        />\r\n        <Button>+</Button>\r\n      </Form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;","import { Categories, IToDo, SAVETODOS_KEY, toDoState } from \"../atoms\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst List = styled.li`      \r\n  margin: 10px auto;\r\n  width: 100%;\r\n  padding: 10px 20px;\r\n  background-color: #f6e58d;\r\n  box-shadow: 5px 5px 10px rgba(0,0,0,0.5);\r\n  border-radius: 5px;   \r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\nconst Text = styled.span`\r\n  font-size: 18px;\r\n  color: rgba(0,0,0);\r\n  line-height: 1.5;  \r\n`;\r\nconst Input = styled.input`\r\n  width: 15px;\r\n  height: 15px;\r\n  margin-right: 5px;\r\n`;\r\nconst ButtonGroup = styled.div`  \r\n`;\r\nconst Button = styled.button`  \r\n  border: 0;\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n  background-color: transparent;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    text-shadow: 1px 1px 2px gray;\r\n  }  \r\n`;\r\n\r\nfunction ToDo({ text, id, category}:IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);    \r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const { currentTarget: { name } } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex(toDo => toDo.id === id); // 클릭했을때 해당 번호 추출\r\n      const newToDo = {text, id, category: name as Categories};\r\n      const newToDos = [...oldToDos.slice(0, targetIndex),\r\n        newToDo, ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n      const stringfyTodos = JSON.stringify(newToDos);\r\n      localStorage.setItem(SAVETODOS_KEY,stringfyTodos);\r\n      return newToDos; // toDo 추가하는 과정\r\n    })\r\n  };\r\n  const DelToDos = (event: React.FormEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { parentElement },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const newToDos = oldToDos.filter(toDo => toDo.id !== Number(parentElement?.id));\r\n      //해당하는 id만 아닌 것만 남겨둘 것.\r\n      const stringfyTodos = JSON.stringify(newToDos);\r\n      localStorage.setItem(SAVETODOS_KEY,stringfyTodos);\r\n      return newToDos; //삭제할 부분 filter로 거른 후 배열 재생성 및 저장\r\n  });\r\n};\r\n  \r\n  return (\r\n    <List id = {id as any}>            \r\n      <Text>\r\n        <Input type = \"checkbox\" />\r\n        {text}\r\n      </Text>\r\n      <ButtonGroup>\r\n        {category !== Categories.DOING && (\r\n        <Button name = {Categories.DOING} onClick = {onClick}>🟢</Button>\r\n        )}\r\n        {category !== Categories.TO_DO && (\r\n        <Button name = {Categories.TO_DO} onClick = {onClick}>🟡</Button>\r\n        )}\r\n        {category !== Categories.DONE && (\r\n        <Button name = {Categories.DONE} onClick = {onClick}>🔵</Button>\r\n        )} \r\n        {/* // 해당되는 카테고리를 클릭하지 않을 때 버튼을 보여라 */}        \r\n      </ButtonGroup>    \r\n      <Button onClick = {DelToDos}>X</Button>\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default ToDo;","import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { Categories, categoryState} from \"../atoms\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Form = styled.form`\r\n  margin: 15px 0px;\r\n  padding: 0 20px;\r\n  height: 32px;\r\n`;\r\nconst Select = styled.select`\r\n  width: 90%;\r\n  height: 90%;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  padding: 0 18px;\r\n  font-size: 15px;\r\n`;\r\nconst Option = styled.option`\r\n  font-size: 15px;\r\n`;\r\n\r\nfunction SelectToDo() {\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n  return (\r\n    <Form>\r\n      <Select value = {category} onInput = {onInput}>\r\n        <Option value = {Categories.TO_DO}>\r\n          🟡 To Do\r\n        </Option>\r\n        <Option value = {Categories.DOING}>\r\n          🟢 Doing\r\n        </Option>\r\n        <Option value = {Categories.DONE}>\r\n          🔵 Done\r\n        </Option>\r\n      </Select>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SelectToDo;","import CreateToDo from \"./CreateToDo\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { toDoSelector } from \"../atoms\";\r\nimport ToDo from \"./ToDo\";\r\nimport SelectToDo from \"./SelectToDo\";\r\nimport styled  from \"styled-components\";\r\nimport { useState } from \"react\";\r\n\r\n\r\nconst Container = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 480px;  \r\n`;\r\nconst H1 = styled.h1`\r\n  font-size: 50px;\r\n  font-weight: 400;\r\n  text-align: center;\r\n`;\r\nconst Ul = styled.ul`\r\n  margin: auto;\r\n  width: 93%;  \r\n  border-radius: 10px;\r\n  //background-color: #f6e58d;\r\n  //box-shadow: 5px 10px 20px rgba(0,0,0,0.5);\r\n`;\r\nconst Add = styled.button`\r\n  display: block;\r\n  cursor: pointer;\r\n  margin: 10px auto;\r\n  background-color: transparent;\r\n  border: 0;\r\n  color: ${props=>props.theme.textColor};\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n`;\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [addBtn, SetAddBtn] = useState(false);\r\n  const onClick = () => {\r\n    SetAddBtn((current) => !current);    \r\n  }\r\n  return (    \r\n    <Container>      \r\n      <H1>TASK LIST</H1>\r\n      <hr />\r\n      {addBtn ? <CreateToDo /> : null}\r\n      <SelectToDo />            \r\n      <Ul>\r\n        {toDos?.map(toDo => <ToDo key = {toDo.id} {...toDo}/>)}\r\n      </Ul>\r\n      <Add onClick = {onClick}>\r\n        {addBtn? \"- Hide New To Do...\" : \"+ Add New To Do...\"}\r\n      </Add>      \r\n    </Container>    \r\n  );\r\n}\r\n\r\nexport default ToDoList;","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\nimport { Helmet } from \"react-helmet\";\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, menu, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  main, menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, main, menu, nav, section {\n  display: block;\n  }\n  /* HTML5 hidden-attribute fix for newer browsers */\n  *[hidden] {\n  display: none;\n  }\n  body {\n  line-height: 1.2;\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${props => props.theme.bgColor};\n  color: ${props => props.theme.textColor};  \n  }\n  menu, ol, ul {\n  list-style: none;\n  }\n  blockquote, q {\n  quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n  content: '';\n  content: none;\n  }\n  table {\n  border-collapse: collapse;\n  border-spacing: 0;\n  }\n  * {\n    box-sizing : border-box;\n  }\n  a {\n    text-decoration: none;\n    color : inherit;\n    //inherit : 부모 color에서 가져옴 \n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <Helmet>\n        <title>TASK LIST</title>\n      </Helmet>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from \"./theme\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme = {theme}>    \n        <App />\n      </ThemeProvider>\n    </RecoilRoot>    \n  </React.StrictMode>,\n  document.getElementById('root'));\n\n\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const theme: DefaultTheme = {\r\n  bgColor: \"#1e3799\",\r\n  textColor: \"#f6b93b\",\r\n  accentColor: \"#38ada9\",\r\n};"],"sourceRoot":""}